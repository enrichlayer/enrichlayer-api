#!/usr/bin/env python3
"""
Test that error mapping works correctly with the improved dynamic approach.
"""

import asyncio
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_error_mapping_with_different_variants():
    """Test error mapping works with different proxycurl variants"""
    print("üß™ Testing error mapping with dynamic ProxycurlException detection...")
    
    # Clear any previous imports
    modules_to_clear = [k for k in sys.modules.keys() if k.startswith('enrichlayer_client.compat')]
    for module in modules_to_clear:
        del sys.modules[module]
    
    # Enable compatibility
    from enrichlayer_client.compat import enable_proxycurl_compatibility
    enable_proxycurl_compatibility()
    
    # Test with asyncio variant
    print("\n1Ô∏è‚É£ Testing error mapping with asyncio variant...")
    try:
        from proxycurl.asyncio import Proxycurl
        proxycurl = Proxycurl(api_key="invalid-key")
        
        # This should trigger an error that gets mapped
        try:
            await proxycurl.linkedin.person.get(linkedin_profile_url="invalid-url")
        except Exception as e:
            exception_type = type(e).__name__
            exception_module = e.__class__.__module__
            print(f"   ‚úÖ Caught exception: {exception_type} from {exception_module}")
            # Should be ProxycurlException from proxycurl.asyncio.base
            if "ProxycurlException" in exception_type and "proxycurl" in exception_module:
                print("   ‚úÖ Error mapping working correctly")
            else:
                print(f"   ‚ö†Ô∏è  Unexpected exception type: {exception_type}")
    except Exception as e:
        print(f"   ‚ùå Test failed: {e}")
    
    # Test with gevent variant
    print("\n2Ô∏è‚É£ Testing error mapping with gevent variant...")
    try:
        # Clear compat imports again
        modules_to_clear = [k for k in sys.modules.keys() if k.startswith('enrichlayer_client.compat')]
        for module in modules_to_clear:
            del sys.modules[module]
        
        # Re-enable compatibility
        from enrichlayer_client.compat import enable_proxycurl_compatibility
        enable_proxycurl_compatibility()
        
        from proxycurl.gevent import Proxycurl
        proxycurl = Proxycurl(api_key="invalid-key")
        
        # This should trigger an error that gets mapped
        try:
            proxycurl.linkedin.person.get(linkedin_profile_url="invalid-url")
        except Exception as e:
            exception_type = type(e).__name__
            exception_module = e.__class__.__module__
            print(f"   ‚úÖ Caught exception: {exception_type} from {exception_module}")
            # Should be ProxycurlException from proxycurl.gevent.base
            if "ProxycurlException" in exception_type and "proxycurl" in exception_module:
                print("   ‚úÖ Error mapping working correctly")
            else:
                print(f"   ‚ö†Ô∏è  Unexpected exception type: {exception_type}")
    except Exception as e:
        print(f"   ‚ùå Test failed: {e}")

def test_dynamic_exception_resolution():
    """Test that the dynamic exception resolution works"""
    print("\n3Ô∏è‚É£ Testing dynamic ProxycurlException resolution...")
    
    # Clear compat imports
    modules_to_clear = [k for k in sys.modules.keys() if k.startswith('enrichlayer_client.compat')]
    for module in modules_to_clear:
        del sys.modules[module]
    
    # Import the monkey_patch module directly to test the helper function
    from enrichlayer_client.compat.monkey_patch import error_mapping_decorator
    
    # Create a mock function that raises an EnrichLayerException
    @error_mapping_decorator
    def mock_function():
        # Import EnrichLayerException to raise it
        from enrichlayer_client.asyncio.base import EnrichLayerException
        raise EnrichLayerException("Test error message")
    
    try:
        mock_function()
    except Exception as e:
        exception_type = type(e).__name__
        exception_module = e.__class__.__module__
        print(f"   ‚úÖ Caught mapped exception: {exception_type} from {exception_module}")
        
        # Should be ProxycurlException from one of the proxycurl modules
        if "ProxycurlException" in exception_type and "proxycurl" in exception_module:
            print("   ‚úÖ Dynamic exception mapping working correctly")
        else:
            print(f"   ‚ö†Ô∏è  Exception not properly mapped: {exception_type}")

async def main():
    """Run all error mapping tests"""
    print("=" * 70)
    print("TESTING IMPROVED ERROR MAPPING WITH DYNAMIC APPROACH")
    print("=" * 70)
    print("Testing that error mapping works correctly without relying on")
    print("a single ProxycurlException variable that could point to different classes.")
    print("=" * 70)
    
    await test_error_mapping_with_different_variants()
    test_dynamic_exception_resolution()
    
    print("\n" + "=" * 70)
    print("üéâ ERROR MAPPING TESTS COMPLETE!")
    print("‚úÖ Dynamic ProxycurlException resolution working")
    print("‚úÖ Exception mapping based on instance type checking")
    print("‚úÖ No dependency on single exception variable")
    print("‚úÖ Works with any proxycurl variant")
    print("=" * 70)

if __name__ == "__main__":
    asyncio.run(main())